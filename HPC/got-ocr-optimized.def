Bootstrap: docker
From: python:3.9-slim

%labels
    Author Ahmed
    Version 2.0
    Description "GOT-OCR 2.0 Optimized Service Container"

%files
    # Fichiers principaux
    main.py /app/main.py
    config.py /app/config.py
    globe.py /app/globe.py
    render.py /app/render.py
    requirements.txt /app/requirements.txt
    
    # Modules models
    models/__init__.py /app/models/__init__.py
    models/ocr_model.py /app/models/ocr_model.py
    
    # Modules services
    services/__init__.py /app/services/__init__.py
    services/ocr_service.py /app/services/ocr_service.py
    
    # Modules utils
    utils/__init__.py /app/utils/__init__.py
    utils/logger.py /app/utils/logger.py
    utils/validators.py /app/utils/validators.py
    
    # Répertoires statiques
    render_tools/ /app/
    frontend/ /app/
    static/ /app/

%environment
    export PYTHONPATH="/app:$PYTHONPATH"
    export OMP_NUM_THREADS=4
    export MKL_NUM_THREADS=4
    export NUMEXPR_NUM_THREADS=4
    export TOKENIZERS_PARALLELISM=true
    export UVICORN_TIMEOUT=300
    # Variables pour CUDA
    export NVIDIA_VISIBLE_DEVICES=all
    export NVIDIA_DRIVER_CAPABILITIES=all

%post
    echo "[INFO] Installation des dépendances système"
    apt-get update && apt-get install -y \
        git \
        libgl1 \
        libglib2.0-0 \
        libomp5 \
        libgomp1 \
        && rm -rf /var/lib/apt/lists/*
    
    echo "[INFO] Mise à jour de pip"
    pip install --upgrade pip
    
    echo "[INFO] Installation des requirements Python"
    pip install --no-cache-dir -r /app/requirements.txt
    
    echo "[INFO] Installation d'optimum pour optimisation CPU/GPU"
    pip install --no-cache-dir optimum
    
    echo "[INFO] Configuration terminée"

%runscript
    cd /app
    echo "[INFO] === Démarrage du conteneur GOT-OCR 2.0 Optimisé ==="
    
    # Vérification de la structure
    echo "[INFO] Vérification de la structure des fichiers"
    if [ ! -f "/app/main.py" ]; then
        echo "[ERREUR] Fichier main.py manquant!"
        exit 1
    fi
    
    if [ ! -d "/app/models" ]; then
        echo "[ERREUR] Répertoire models manquant!"
        exit 1
    fi
    
    if [ ! -d "/app/services" ]; then
        echo "[ERREUR] Répertoire services manquant!"
        exit 1
    fi
    
    if [ ! -d "/app/utils" ]; then
        echo "[ERREUR] Répertoire utils manquant!"
        exit 1
    fi
    
    echo "[INFO] Structure des fichiers validée"
    
    # Affichage des informations système
    echo "[INFO] === Informations système ==="
    echo "[INFO] Python version: $(python --version)"
    echo "[INFO] Working directory: $(pwd)"
    echo "[INFO] PYTHONPATH: $PYTHONPATH"
    
    # Test d'import des modules
    echo "[INFO] Vérification des imports..."
    python -c "
try:
    import torch
    import transformers
    import fastapi
    import uvicorn
    from models.ocr_model import OCRModelManager
    from services.ocr_service import OCRService
    from utils.validators import OCRRequestValidator
    print('[INFO] Tous les imports sont OK')
except ImportError as e:
    print(f'[ERREUR] Import failed: {e}')
    exit(1)
"
    
    # Vérification CUDA
    echo "[INFO] Vérification CUDA..."
    python -c "
import torch
print(f'[INFO] CUDA disponible: {torch.cuda.is_available()}')
print(f'[INFO] Nombre de GPUs: {torch.cuda.device_count()}')
if torch.cuda.is_available():
    for i in range(torch.cuda.device_count()):
        print(f'[INFO] GPU {i}: {torch.cuda.get_device_name(i)}')
else:
    print('[INFO] Mode CPU activé')
"
    
    # Démarrage du serveur
    echo "[INFO] === Démarrage du serveur Uvicorn ==="
    python main.py